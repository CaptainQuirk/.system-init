#!bin/bash

# Array of removed packages
removed_packages=()

# Search for a package through apt-cache search
# And stores the result of the search in a global
# variable for lack of a better way for the moment
search_package(){

  # Getting package name to search for
  local name="$@"

  # Prompting the user with paged list
  # of packages corresponding to name given
  read -p "  » Press [enter] to get a list of available packages for « $name »" key
  apt-cache search $name | less

  # Looping infinitely unless the package name
  # given exists or user wants to exit
  while :
  do

    # Prompt user for exact package name or exit
    read -p "  » Enter the « $name » package name or type 0 to exit: " package
    case $package in
      # Skipping and removing installed packages
      0) echo "» Skipping"
         remove_installed_packages
         break
      ;;

      # Searching for packages with this exact package name
      *)  found_packages=`apt-cache search "^$package$" | wc -l`
          case $found_packages in
          # No package found
          0) pause "  » No package named « $package » was found.";;

          # Just one package found, bingo !
          #1) echo "  »» Installing package « $package »";
          1) package_name=$package;break;;
            #get_package $package;
            #break;;

          # More than one package found ! Error
          *) pause "» $found_packages package(s) corresponding to $package were found.";;
        esac
    esac
  done
}
# Simple apt-get operation after user confirmation
# Array of installed packages gets updated after installation
# On abort, already installed packages are removed
uninstall_package(){
  local package="$@"
  read -p "  »» Press [enter] to remove package « $package » or 0 to abort : " key
  case $key in
    "") echo "  »» Installing package"
        sudo apt-get remove $package
        removed_packages+=($package)
    ;;
    0)  echo "  »» Aborting cleaning operation"
        exit 1
    ;;
  esac
}


# 1 - Prompts the user for a package presumably fetched in a list of results
#     returned by the command apt-cache search
# 2 - Checks the input validity
# 3 - Installs package using apt
remove_package() {
  # Retrieving param
  local name="$@"

  # Testing if we can get the package directly by its
  # name
  echo "» Looking for package « $name »"
  if [ `apt-cache search "^$name$" | wc -l` == 1 ];
  then
    uninstall_package $name
  else
    echo "  » Package « $name » wasn't found. We'll look for it !"
    search_package $name

    # Only installing if package name isn't empty
    if [ "$package_name" != '' ];
    then
      uninstall_package $package_name
      package_name=''
    fi
  fi
}

# Removing installed packages
echo "» Removing installed packages"
declare -a PACKAGES=('git' 'rubygems' 'ruby-dev' 'ruby')
for package in "${PACKAGES[@]}"
do :
  remove_package $package
done

# Removing .oh-my-chef directory
if [ -d "~/.oh-my-chef" k];
then
  echo "» Removing .oh-my-chef directory"
  rm -rf ~/.oh-my-chef
fi

# Removing bundler directory
if [ -d "~/.bundler" ];
then
  echo "» Removing .bundler directory"
  rm -rf ~/.bundler
fi

exit 0;

